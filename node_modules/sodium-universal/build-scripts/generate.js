/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const root = path.dirname(require.resolve('sodium-javascript/package.json'))

const tmp = "module.exports = require('sodium-native')\n"

function recurse (dir) {
  const ls = fs.readdirSync(dir)
  const subdir = path.relative(root, dir)
  if (subdir) fs.mkdirSync(subdir, { recursive: true })

  for (const file of ls) {
    if (file === 'internal') recurse(path.join(dir, file))
    if (!/\.js$/i.test(file)) continue
    if (file === 'example.js') continue
    if (file === 'test.js') continue

    fs.writeFileSync(path.join(__dirname, '..', subdir, file), tmp)
  }
}

recurse(root)

const pkg = require('sodium-javascript/package.json')
const myPkg = require('../package.json')

for (const key of Object.keys(pkg.dependencies)) {
  myPkg.dependencies[key] = pkg.dependencies[key]
}

fs.writeFileSync(path.join(__dirname, '../package.json'), JSON.stringify(myPkg, null, 2) + '\n')
