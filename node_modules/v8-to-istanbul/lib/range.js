/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

/**
 * ...something resembling a binary search, to find the lowest line within the range.
 * And then you could break as soon as the line is longer than the range...
 */
module.exports.sliceRange = (lines, startCol, endCol, inclusive = false) => {
  let start = 0
  let end = lines.length

  if (inclusive) {
    // I consider this a temporary solution until I find an alternaive way to fix the "off by one issue"
    --startCol
  }

  while (start < end) {
    let mid = (start + end) >> 1
    if (startCol >= lines[mid].endCol) {
      start = mid + 1
    } else if (endCol < lines[mid].startCol) {
      end = mid - 1
    } else {
      end = mid
      while (mid >= 0 && startCol < lines[mid].endCol && endCol >= lines[mid].startCol) {
        --mid
      }
      start = mid + 1
      break
    }
  }

  while (end < lines.length && startCol < lines[end].endCol && endCol >= lines[end].startCol) {
    ++end
  }

  return lines.slice(start, end)
}
