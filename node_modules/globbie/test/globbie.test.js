/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

const Globbie = require('../index')
const path = require('path')
const test = require('brittle')

process.chdir(path.join(__dirname, 'fixtures'))

function toPlatformPaths (paths) {
  return process.platform === 'win32' ? paths.map(p => p.replace(/\//g, path.sep)) : paths
}

test('match all js files', async (t) => {
  const g = new Globbie('**.js', { sync: true })
  const matches = g.match()

  t.alike(matches.sort(), toPlatformPaths([
    'rootfile-1.js',
    'rootfile-2.js',
    'rootfile-3.js',
    'subpath/subpathfile-1.js',
    'subpath/subpathfile-2.js',
    'subpath/subpathfile-3.js',
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js'
  ]))
})

test('match all js and ts files', async (t) => {
  const g = new Globbie('**/*.{js,ts}', { sync: true })
  const matches = g.match()

  t.alike(matches.sort(), toPlatformPaths([
    'rootfile-1.js',
    'rootfile-2.js',
    'rootfile-3.js',
    'rootfile-invalid.ts',
    'subpath/subpathfile-1.js',
    'subpath/subpathfile-2.js',
    'subpath/subpathfile-3.js',
    'subpath/subpathfile-invalid.ts',
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js',
    'subpath/subsubpath/subsubpathfile-invalid.ts'
  ]))
})

test('match only subpath js files', async (t) => {
  const g = new Globbie('subpath/**/*.js', { sync: true })
  const matches = g.match()

  t.alike(matches.sort(), toPlatformPaths([
    'subpath/subpathfile-1.js',
    'subpath/subpathfile-2.js',
    'subpath/subpathfile-3.js',
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js'
  ]))
})

test('match only subpath js files - dir set to subsubpath', async (t) => {
  const g = new Globbie('subpath/**/*.js', { sync: true })
  const matches = g.match('subpath/subsubpath')

  t.alike(matches.sort(), toPlatformPaths([
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js'
  ]))
})

test('async match all js files', async (t) => {
  const g = new Globbie('**.js')
  const matches = await g.match()
  t.alike(matches.sort(), toPlatformPaths([
    'rootfile-1.js',
    'rootfile-2.js',
    'rootfile-3.js',
    'subpath/subpathfile-1.js',
    'subpath/subpathfile-2.js',
    'subpath/subpathfile-3.js',
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js'
  ]))
})

test('async match all js and ts files', async (t) => {
  const g = new Globbie('**/*.{js,ts}')
  const matches = await g.match()

  t.alike(matches.sort(), toPlatformPaths([
    'rootfile-1.js',
    'rootfile-2.js',
    'rootfile-3.js',
    'rootfile-invalid.ts',
    'subpath/subpathfile-1.js',
    'subpath/subpathfile-2.js',
    'subpath/subpathfile-3.js',
    'subpath/subpathfile-invalid.ts',
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js',
    'subpath/subsubpath/subsubpathfile-invalid.ts'
  ]))
})

test('async match only subpath', async (t) => {
  const g = new Globbie('subpath/**/*.js')
  const matches = await g.match()

  t.alike(matches.sort(), toPlatformPaths([
    'subpath/subpathfile-1.js',
    'subpath/subpathfile-2.js',
    'subpath/subpathfile-3.js',
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js'
  ]))
})

test('async match only subpath js files - dir set to subsubpath', async (t) => {
  const g = new Globbie('subpath/**/*.js')
  const matches = await g.match('subpath/subsubpath')

  t.alike(matches.sort(), toPlatformPaths([
    'subpath/subsubpath/subsubpathfile-1.js',
    'subpath/subsubpath/subsubpathfile-2.js',
    'subpath/subsubpath/subsubpathfile-3.js'
  ]))
})
