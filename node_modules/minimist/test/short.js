/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

'use strict';

var parse = require('../');
var test = require('tape');

test('numeric short args', function (t) {
	t.plan(2);
	t.deepEqual(parse(['-n123']), { n: 123, _: [] });
	t.deepEqual(
		parse(['-123', '456']),
		{ 1: true, 2: true, 3: 456, _: [] }
	);
});

test('short', function (t) {
	t.deepEqual(
		parse(['-b']),
		{ b: true, _: [] },
		'short boolean'
	);
	t.deepEqual(
		parse(['foo', 'bar', 'baz']),
		{ _: ['foo', 'bar', 'baz'] },
		'bare'
	);
	t.deepEqual(
		parse(['-cats']),
		{ c: true, a: true, t: true, s: true, _: [] },
		'group'
	);
	t.deepEqual(
		parse(['-cats', 'meow']),
		{ c: true, a: true, t: true, s: 'meow', _: [] },
		'short group next'
	);
	t.deepEqual(
		parse(['-h', 'localhost']),
		{ h: 'localhost', _: [] },
		'short capture'
	);
	t.deepEqual(
		parse(['-h', 'localhost', '-p', '555']),
		{ h: 'localhost', p: 555, _: [] },
		'short captures'
	);
	t.end();
});

test('mixed short bool and capture', function (t) {
	t.same(
		parse(['-h', 'localhost', '-fp', '555', 'script.js']),
		{
			f: true, p: 555, h: 'localhost',
			_: ['script.js'],
		}
	);
	t.end();
});

test('short and long', function (t) {
	t.deepEqual(
		parse(['-h', 'localhost', '-fp', '555', 'script.js']),
		{
			f: true, p: 555, h: 'localhost',
			_: ['script.js'],
		}
	);
	t.end();
});
