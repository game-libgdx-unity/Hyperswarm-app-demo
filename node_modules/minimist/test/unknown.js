/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

'use strict';

var parse = require('../');
var test = require('tape');

test('boolean and alias is not unknown', function (t) {
	var unknown = [];
	function unknownFn(arg) {
		unknown.push(arg);
		return false;
	}
	var aliased = ['-h', 'true', '--derp', 'true'];
	var regular = ['--herp', 'true', '-d', 'true'];
	var opts = {
		alias: { h: 'herp' },
		boolean: 'h',
		unknown: unknownFn,
	};
	parse(aliased, opts);
	parse(regular, opts);

	t.same(unknown, ['--derp', '-d']);
	t.end();
});

test('flag boolean true any double hyphen argument is not unknown', function (t) {
	var unknown = [];
	function unknownFn(arg) {
		unknown.push(arg);
		return false;
	}
	var argv = parse(['--honk', '--tacos=good', 'cow', '-p', '55'], {
		boolean: true,
		unknown: unknownFn,
	});
	t.same(unknown, ['--tacos=good', 'cow', '-p']);
	t.same(argv, {
		honk: true,
		_: [],
	});
	t.end();
});

test('string and alias is not unknown', function (t) {
	var unknown = [];
	function unknownFn(arg) {
		unknown.push(arg);
		return false;
	}
	var aliased = ['-h', 'hello', '--derp', 'goodbye'];
	var regular = ['--herp', 'hello', '-d', 'moon'];
	var opts = {
		alias: { h: 'herp' },
		string: 'h',
		unknown: unknownFn,
	};
	parse(aliased, opts);
	parse(regular, opts);

	t.same(unknown, ['--derp', '-d']);
	t.end();
});

test('default and alias is not unknown', function (t) {
	var unknown = [];
	function unknownFn(arg) {
		unknown.push(arg);
		return false;
	}
	var aliased = ['-h', 'hello'];
	var regular = ['--herp', 'hello'];
	var opts = {
		default: { h: 'bar' },
		alias: { h: 'herp' },
		unknown: unknownFn,
	};
	parse(aliased, opts);
	parse(regular, opts);

	t.same(unknown, []);
	t.end();
	unknownFn(); // exercise fn for 100% coverage
});

test('value following -- is not unknown', function (t) {
	var unknown = [];
	function unknownFn(arg) {
		unknown.push(arg);
		return false;
	}
	var aliased = ['--bad', '--', 'good', 'arg'];
	var opts = {
		'--': true,
		unknown: unknownFn,
	};
	var argv = parse(aliased, opts);

	t.same(unknown, ['--bad']);
	t.same(argv, {
		'--': ['good', 'arg'],
		_: [],
	});
	t.end();
});
