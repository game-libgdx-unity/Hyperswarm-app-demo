/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

const z32 = require('./')
const b4a = require('b4a')
const test = require('brittle')
const crypto = require('crypto')

test('basic examples', function (t) {
  {
    const s = z32.encode('Example z-base-32')
    const b = z32.decode(s)

    t.is(s, 'eihgn5mopt11y6tpcjozg3jpgc3y')
    t.is(b.toString(), 'Example z-base-32')
  }

  {
    const s = z32.encode('The quick brown fox jumps over the lazy dog. ðŸ‘€')
    const b = z32.decode(s)

    t.is(s, 'ktwgkedtqiwsg43ycj3g675qrbug66bypj4s4hdurbzzc3m1rb4go3jyptozw6jyctzsqmty6nx3dyy')
    t.is(b.toString(), 'The quick brown fox jumps over the lazy dog. ðŸ‘€')
  }
})

test('random buffers', function (t) {
  for (let i = 0; i < 1e5; i++) {
    const b = crypto.randomBytes(Math.round(Math.random() * 100))
    const s = z32.encode(b)
    const o = z32.decode(s)

    if (!b4a.equals(o, b)) {
      t.alike(o, b)
      return
    }
  }

  t.pass('all random buffers passed')
})

test('bad inputs', function (t) {
  t.exception(function () {
    z32.decode('!!!')
  })
  t.exception(function () {
    z32.decode('~~~')
  })
  t.exception(function () {
    z32.decode('I1I1I1')
  })
})
