/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

exports.setLocation = function setLocation(
    isReplace,
    activeSort,
    isFlat,
    activeFilters,
    fileFilter,
    expandedLines
) {
    const params = [
        activeSort.sortKey,
        activeSort.order,
        isFlat,
        activeFilters.low,
        activeFilters.medium,
        activeFilters.high,
        encodeURIComponent(fileFilter),
        expandedLines.map(encodeURIComponent).join(',')
    ];
    const newUrl = `#${params.join('/')}`;

    if (newUrl === location.hash) {
        return;
    }

    window.history[isReplace ? 'replaceState' : 'pushState'](null, '', newUrl);
};

exports.decodeLocation = function decodeLocation() {
    const items = location.hash.substr(1).split('/');
    if (items.length !== 8) {
        return null;
    }

    try {
        return {
            activeSort: {
                sortKey: items[0],
                order: items[1]
            },
            isFlat: JSON.parse(items[2]),
            activeFilters: {
                low: JSON.parse(items[3]),
                medium: JSON.parse(items[4]),
                high: JSON.parse(items[5])
            },
            fileFilter: decodeURIComponent(items[6]),
            expandedLines: items[7].split(',').map(decodeURIComponent)
        };
    } catch (e) {
        return null;
    }
};
