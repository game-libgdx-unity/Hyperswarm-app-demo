/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

module.exports = TimeOrderedSet

function TimeOrderedSet () {
  if (!(this instanceof TimeOrderedSet)) return new TimeOrderedSet()
  this.oldest = null
  this.latest = null
  this.length = 0
}

TimeOrderedSet.prototype.has = function (node) {
  return !!(node.next || node.prev) || node === this.oldest
}

TimeOrderedSet.prototype.add = function (node) {
  if (this.has(node)) this.remove(node)

  if (!this.latest && !this.oldest) {
    this.latest = this.oldest = node
    node.prev = node.next = null
  } else {
    this.latest.next = node
    node.prev = this.latest
    node.next = null
    this.latest = node
  }

  this.length++

  return node
}

TimeOrderedSet.prototype.remove = function (node) {
  if (!this.has(node)) return node

  if (this.oldest !== node && this.latest !== node) {
    node.prev.next = node.next
    node.next.prev = node.prev
  } else {
    if (this.oldest === node) {
      this.oldest = node.next
      if (this.oldest) this.oldest.prev = null
    }
    if (this.latest === node) {
      this.latest = node.prev
      if (this.latest) this.latest.next = null
    }
  }

  node.next = node.prev = null
  this.length--

  return node
}

TimeOrderedSet.prototype.toArray = function (pick) {
  if (!pick) pick = Infinity
  var list = []
  var node = this.oldest
  while (node && pick--) {
    list.push(node)
    node = node.next
  }
  return list
}
