/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

#!/usr/bin/env node

const HyperDHT = require('./')

const bootstrap = arg('bootstrap')
const nodes = arg('node') ? '' : arg('nodes')

const isBootstrap = bootstrap === '' || (bootstrap !== null && bootstrap.startsWith('--'))

if (isBootstrap) {
  const port = Number(arg('port') || '0') || 49737
  const host = arg('host')
  if (!host) throw new Error('You need to specify --host <node ip>')
  startBootstrapNode(port, host)
} else {
  startNodes(Number(nodes) || 1, bootstrap ? bootstrap.split(',') : undefined)
}

function arg (name) {
  const i = process.argv.indexOf('--' + name)
  if (i === -1) return null
  return i < process.argv.length - 1 ? process.argv[i + 1] : ''
}

async function startBootstrapNode (port, host) {
  console.log('Starting DHT bootstrap node...')

  const node = HyperDHT.bootstrapper(port, host)
  await node.ready()

  node.on('close', function () {
    console.log('Bootstrap node closed')
  })

  console.log('Bootstrap node bound to', node.address())
  console.log('Fully started Hyperswarm DHT bootstrap node')

  process.once('SIGINT', function () {
    node.destroy()
  })
}

async function startNodes (cnt, bootstrap) {
  console.log('Booting DHT nodes...')

  const port = Number(arg('port') || '0') || 0
  const host = arg('host') || undefined
  const all = []

  if (port && cnt !== 1) throw new Error('--port is only valid when running a single node')

  while (all.length < cnt) {
    const node = new HyperDHT({ host, port, anyPort: !port, bootstrap })
    await node.ready()

    all.push(node)

    const id = all.push(node) - 1
    console.log('Node #' + id + ' bound to', node.address())

    node.on('ephemeral', function () {
      console.log('Node #' + id + ' is ephemeral', node.address())
    })

    node.on('persistent', function () {
      console.log('Node #' + id + ' is persistent, joining remote routing tables', node.address())
    })

    node.on('close', function () {
      console.log('Node #' + id + ' closed')
    })
  }

  console.log('Fully started ' + cnt + ' Hyperswarm DHT node' + (cnt === 1 ? '' : 's'))

  process.once('SIGINT', function () {
    console.log('Shutting down nodes...')

    for (const node of all) {
      node.destroy()
    }
  })
}
