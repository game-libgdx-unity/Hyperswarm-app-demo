/*
 * Copyright (c) 2024 Vinh Vu
 * Email: mrthanhvinh168@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This source code is the property of Vinh Vu. It cannot be re-used or shared
 * with anyone else without his consent.
 */

const c = require('compact-encoding')
const { oplog } = require('./messages')

module.exports = class BigHeader {
  constructor (storage) {
    this.storage = storage
  }

  async load (external) {
    const buf = await new Promise((resolve, reject) => {
      this.storage.read(external.start, external.length, (err, buf) => {
        if (err) return reject(err)
        resolve(buf)
      })
    })

    const header = c.decode(oplog.header, buf)
    header.external = external
    return header
  }

  async flush (header) {
    const external = header.external || { start: 0, length: 0 }
    header.external = null

    const buf = c.encode(oplog.header, header)

    let start = 0
    if (buf.byteLength > external.start) {
      start = external.start + external.length
      const rem = start & 4095
      if (rem > 0) start += (4096 - rem)
    }

    header.external = { start, length: buf.byteLength }

    await new Promise((resolve, reject) => {
      this.storage.write(start, buf, (err) => {
        if (err) return reject(err)
        resolve()
      })
    })

    return header
  }

  close () {
    return new Promise((resolve, reject) => {
      this.storage.close((err) => {
        if (err) return reject(err)
        resolve()
      })
    })
  }
}
